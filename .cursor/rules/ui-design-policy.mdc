---
alwaysApply: true
---
RAGシステムにおけるUI設計ポリシー - NiceGUI + CSS統合指針

## 基本原則

### 情報密度最大化
- 無駄な隙間は完全排除：画面端の余白は0px、コンポーネント間隙間は最小限
- 1画面内の情報量を最大化：スクロール不要で全情報を表示
- 行間・パディング・マージンは必要最小限に抑制

### 階層的CSS設計
- CSS優先度は自然な階層構造で制御、`!important`は完全禁止
- レベル1（最下層）：ブラウザリセット（margin: 0, padding: 0）
- レベル2：フレームワーク制御（Quasar/NiceGUIデフォルト値の正確な上書き）
- レベル3：共通デザインシステム（再利用可能なユーティリティクラス）
- レベル4（最上層）：コンポーネント固有スタイル

### 場当たり設計完全排除
- CSS定義は1箇所のみ：複数ファイルでの重複定義禁止
- 推測による設定禁止：ブラウザ開発者ツールで実測値確認必須
- デバッグ駆動設計：問題発生時は根本原因を特定してから解決

## NiceGUI特化ガイドライン

### DOM構造の正確理解
```html
<body>                           <!-- ブラウザデフォルト: margin: 8px -->
  <div id="q-app">               
    <div class="q-layout">       
      <header class="q-header">  <!-- メニューエリア -->
      <main class="q-page-container">  <!-- Quasarデフォルト: padding: 16px -->
        <div class="q-page">     <!-- Quasarデフォルト: padding: 16px -->
          <div class="nicegui-content">  <!-- NiceGUIデフォルト: padding: 1rem -->
            <!-- コンテンツエリア -->
          </div>
        </div>
      </main>
    </div>
  </div>
</body>
```

### 余白除去の正確な実装
- ブラウザリセット：`html, body { margin: 0; padding: 0; }`
- Quasar制御：`.q-page-container, .q-page { padding: 0; }`
- NiceGUI制御：`.nicegui-content { padding: 0; }`
- コンポーネント制御：`.nicegui-row, .nicegui-column { gap: 0; }`

### センタリング設計原則
- Flexboxコンテナ使用：`display: flex; justify-content: center; align-items: center;`
- `text-align: center`はインライン要素のみ使用
- コンテナとアイテムのセンタリングを明確に区別

## CSS責任分離

### ファイル構成
```
prototypes/
├── main_new.py                 # ページ定義のみ（CSS記述禁止）
├── ui/
│   ├── styles/
│   │   ├── global.css          # 唯一のグローバルCSS定義場所
│   │   └── common.py           # Python定数・クラス定義
│   ├── components/
│   │   └── layout.py           # レイアウトコンポーネント
│   └── pages/
│       └── *.py                # ページ固有ロジック（CSS記述禁止）
```

### CSS定義規則
- グローバルCSS：`ui.add_head_html()`は1箇所のみで定義
- Python定数：`CommonStyles`クラスで色・サイズ・スペーシング管理
- コンポーネントクラス：再利用可能なTailwind/カスタムクラス定義

### 共通設定の切り出し
```python
# ui/styles/common.py
class CommonStyles:
    # フォントサイズ
    FONT_SIZE_XS = "text-xs"      # 12px
    FONT_SIZE_SM = "text-sm"      # 14px
    FONT_SIZE_BASE = "text-base"  # 16px
    
    # 色設定
    COLOR_PRIMARY = "#334155"     # メイン色
    COLOR_TEXT_PRIMARY = "#1f2937"
    
    # スペーシング
    PADDING_NONE = "p-0"
    MARGIN_NONE = "m-0"
    
    # コンポーネント
    BTN_PRIMARY = "bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded"
    CARD_BASE = "bg-white rounded-lg shadow-md p-4"
```

## 実装チェックリスト

### 開始前必須確認
- [ ] CSS定義場所は1箇所のみか？
- [ ] ブラウザ開発者ツールでDOM構造を確認したか？
- [ ] フレームワークのデフォルト値を実測したか？

### 実装中必須確認
- [ ] `!important`を使用していないか？
- [ ] 複数ファイルで同じスタイルを定義していないか？
- [ ] Flexboxとtext-alignを正しく使い分けているか？
- [ ] 共通設定を`CommonStyles`から使用しているか？

### 完成後必須確認
- [ ] 画面四辺の隙間が0pxか？（開発者ツールで実測）
- [ ] センタリングが期待通りか？
- [ ] 情報密度が最大化されているか？
- [ ] 1画面内にスクロール不要で情報が収まっているか？

## 禁止事項

### 絶対禁止
- `!important`の使用
- 複数ファイルでのCSS重複定義
- 推測によるデフォルト値設定
- `text-align`によるFlexboxアイテムのセンタリング

### 強く非推奨
- インラインスタイルの多用（`.style()`の濫用）
- ハードコードされた数値（色・サイズ・スペーシング）
- 場当たり的なマージン・パディング調整

## デバッグ手順

### 隙間問題の解決手順
1. ブラウザ開発者ツールでDOM構造確認
2. 各レベル（html/body/.q-page/.nicegui-content）の実測値確認
3. 計算値と期待値の差分特定
4. 該当レベルのCSSを正確に上書き

### センタリング問題の解決手順
1. 親コンテナがFlexboxか確認
2. `justify-content`と`align-items`の設定確認
3. 子要素の`flex`プロパティ確認
4. テキストの場合は`text-align`併用

## 重要な技術仕様

### NiceGUIデフォルト値（実測）
- `.q-page-container`: `padding: 16px`
- `.q-page`: `padding: 16px`
- `.nicegui-content`: `padding: 1rem` (16px)
- `.nicegui-row`: `gap: 8px`
- `.nicegui-column`: `gap: 8px`

### ブラウザデフォルト値
- `body`: `margin: 8px`
- `h1-h6`: `margin-top`, `margin-bottom`設定あり

## 完全paddingゼロ実現ノウハウ（実証済み）

### 成功パターン
1. **position:fixed + 明示的寸法指定**
   ```css
   position:fixed;top:0;left:0;right:0;width:100%;height:48px;
   background:#334155;padding:0;margin:0;overflow:hidden;
   ```
   → ヘッダー・フッターで100%成功

2. **グローバルCSS階層制御**
   ```css
   html, body { margin:0; padding:0; width:100%; overflow-x:hidden; }
   #q-app { margin:0; padding:0; width:100%; overflow-x:hidden; }
   .q-layout { margin:0; padding:0; width:100%; overflow-x:hidden; }
   .q-page-container { padding:0; margin:0; width:100%; }
   .q-page { padding:0; margin:0; width:100%; }
   .nicegui-content { padding:0; margin:0; width:100%; }
   .nicegui-row, .nicegui-column { margin:0; padding:0; gap:0; }
   ```
   → 全フレームワーク制御で成功

3. **要素別明示的制御**
   ```python
   ui.element('div').style('margin:0;margin-left:0;margin-right:0;padding:0;width:100%;')
   ```
   → 個別要素でも成功

### 失敗パターン
1. **TailwindCSS依存**: `px-4`, `py-2` 等は意図しないpadding挿入
2. **100vw使用**: スクロールバー分はみ出し → `width:100%`が正解
3. **NiceGUI classes()依存**: `w-full`等も内部でpadding付与の可能性

### 確実な手順
1. グローバルCSS設定（main.py）
2. position:fixed要素（ヘッダー・フッター）
3. 個別要素の明示的制御
4. ブラウザ開発者ツールで実測値確認

## 共通コンポーネント設計原則

### ファイル構成戦略
```
prototypes/ui/
├── components/
│   ├── layout.py      # ページ全体構造（ヘッダー・フッター）
│   ├── sections.py    # セクション単位（ヒーロー・機能リスト・状況表示）
│   └── elements.py    # 個別要素（ボタン・パネル・テーブル）
├── pages/
│   ├── arrangement_test.py  # 【重要】UI実験・練習専用ページ
│   └── (その他本番ページ)
└── styles/
    └── common.py      # CSS定数・クラス定義
```

### コンポーネント階層
- **Level 1**: ページ全体レイアウト（layout.py）
- **Level 2**: セクション単位コンポーネント（sections.py）  
- **Level 3**: 個別UI要素（elements.py）
- **Level 4**: スタイル定数（common.py）

## UI開発フロー - arrangement_test.py実験駆動開発

### 基本方針
**「本番コードを壊さずに、新機能・新コンポーネントの実験を安全に行う」**

### arrangement_test.py の役割
1. **新コンポーネント開発の実験場**
   - 新しいUI要素の作り込み・テスト
   - レイアウトパターンの試行錯誤
   - デザインバリエーションの比較検討

2. **共通コンポーネント化の練習場**
   - 既存コードから共通パターンを抽出
   - 再利用可能な形への変換練習
   - パラメータ設計の最適化

3. **配置・組み合わせテスト**
   - 複数コンポーネントの組み合わせ確認
   - レスポンシブ動作の検証
   - アクセシビリティテスト

### 安全な開発フロー

#### ステップ1: 実験・練習フェーズ
```
arrangement_test.py（タブ機能活用）
├── タブ1: リサイズ4分割（基本レイアウト）
├── タブ2: 新レイアウト実験①（自由改変可）
├── タブ3: 新レイアウト実験②（自由改変可）  
└── タブ4: コンポーネント単体練習（自由改変可）
```

**実験ルール:**
- `arrangement_test.py`内で自由に書き換え・破壊OK
- `# === 実験エリア開始/終了 ===` でマーク
- 失敗してもロールバック簡単

#### ステップ2: 共通化・本番投入フェーズ
```
実験完了 → 共通コンポーネント化 → 本番配置
    ↓              ↓               ↓
arrangement_test.py → components/ → 本番ページ
```

**投入ルール:**
- 実験で安定したコンポーネントのみ移植
- `elements.py` → `sections.py` → `layout.py` の順で段階投入
- 本番ページは最小限の変更に留める

### 禁止事項
- **components/内での直接実験・練習は厳禁**
- **本番ページでの場当たり的UI調整は厳禁**
- **arrangement_test.pyを本番環境で使用禁止**

### メンテナンス指針
- arrangement_test.pyは定期的にクリーンアップ
- 成功パターンはコメント付きで保存
- 失敗パターンも学習のため一時保存

これらの原則に従い、**安全性と革新性を両立したUI開発**を実現する。

## 共通コンポーネント実装ガイド（2025年実証済み）+ NiceGUI公式準拠

### NiceGUI公式ドキュメント準拠の基本原則
**参考**: [NiceGUI Documentation](https://nicegui.io/documentation/)

#### **コンポーネント設計のNiceGUI準拠ルール**
1. **ui.element()ベース構築**: 全てのカスタムコンポーネントは`ui.element()`から開始
2. **context manager活用**: `with ui.element():` パターンで階層構造を明確化
3. **style()メソッド統一**: `.style('CSS文字列')` での統一的スタイル制御
4. **props()での属性制御**: HTML属性は`.props('id="xxx" class="yyy"')`で設定
5. **classes()でCSS class**: Tailwind等のクラス指定は`.classes('w-full h-full')`
6. **公式コンポーネント優先**: 可能な限り`ui.button()`, `ui.table()`, `ui.card()`等を活用

#### **NiceGUIコンポーネント階層構造（公式推奨）**
```python
# Level 1: Page Layout（ページ全体）
ui.page('/path')
def page_function():
    with ui.header():         # ヘッダー
        pass
    with ui.column():         # メインコンテンツ
        with ui.row():        # 横並びセクション
            with ui.card():   # カードコンポーネント
                ui.label()    # 個別要素
    with ui.footer():         # フッター
        pass
```

#### **padding/margin設定の公式準拠アプローチ**
```python
# ❌ 旧方式: CSS直書き回避
ui.element('div').style('padding: 16px; margin: 8px;')

# ✅ 推奨: NiceGUIクラス + 必要時CSS補完
ui.element('div').classes('p-4 m-2').style('box-sizing: border-box;')

# ✅ 公式コンポーネント + スタイル調整
ui.card().classes('p-4').style('margin: 0; padding: 16px;')
```

#### **レスポンシブ設計（公式推奨）**
```python
# Tailwindクラス活用
ui.element('div').classes('w-full h-screen md:w-1/2 lg:w-1/3')

# グリッドシステム
with ui.grid(columns='repeat(auto-fit, minmax(300px, 1fr))'):
    for item in items:
        ui.card()
```

### MainContentArea - FixedHeaderFooterContainer（NiceGUI準拠版）
```python
# prototypes/ui/components/layout.py
class MainContentArea:
    """
    NiceGUI公式ガイドライン + simple_test.py成功実装の統合版
    
    機能:
    1. ui.query().style()でNiceGUIフレームワーク要素を完全制御
    2. calc(100vh - 48px - 24px)による正確な高さ計算
    3. position:fixedヘッダー・フッター対応の完全レイアウト
    4. NiceGUI公式コンポーネント活用でメンテナンス性向上
    
    NiceGUI公式準拠要素:
    - ui.element()をベースとした構築
    - context managerパターン準拠
    - classes()とstyle()の使い分け
    
    Usage:
        RAGHeader()
        with MainContentArea():
            # NiceGUI公式コンポーネント配置推奨
            with ui.card():
                ui.label('コンテンツ')
        RAGFooter()
    """
```

### NiceGUI公式コンポーネント活用指針

#### **基本UI要素（公式推奨優先順位）**
1. **ui.card()**: パネル・セクション区切り
2. **ui.column() / ui.row()**: レイアウト制御
3. **ui.button()**: 全ボタン操作
4. **ui.table()**: データ表示（ページネーション内蔵）
5. **ui.input() / ui.select()**: フォーム要素
6. **ui.label() / ui.html()**: テキスト表示
7. **ui.icon()**: アイコン表示

#### **高度な公式コンポーネント**
```python
# ページネーション（公式内蔵機能）
ui.table(columns=columns, rows=rows, pagination=True)

# タブシステム（公式推奨）
with ui.tabs() as tabs:
    ui.tab('tab1', label='タブ1')
    ui.tab('tab2', label='タブ2')
with ui.tab_panels(tabs):
    with ui.tab_panel('tab1'):
        ui.label('タブ1コンテンツ')

# スプリッター（公式コンポーネント）
with ui.splitter() as splitter:
    with splitter.before:
        ui.label('左パネル')
    with splitter.after:
        ui.label('右パネル')
```

### 実証済み成功パターン（NiceGUI準拠）
- **ui.query() x 6個出力**: html, body, .q-layout, .q-page-container, .q-page, .nicegui-content
- **calc()高さ計算**: `calc(100vh - 48px - 24px)` による正確な高さ制御
- **DOM構造制御**: ブラウザ〜NiceGUIフレームワーク全階層を完全制御
- **公式コンポーネント最大活用**: カスタムCSS最小限、NiceGUI内蔵機能優先

### コンポーネント化の成功手順（NiceGUI準拠版）
1. **実験フェーズ**: arrangement_test.pyで公式コンポーネントベース実装作成
2. **公式コンポーネント検証**: NiceGUIドキュメントで最適な公式要素を確認
3. **バックアップ作成**: 既存コンポーネントを `_back` でリネーム
4. **NiceGUI準拠実装**: 公式推奨パターン + 成功パターンの融合
5. **実動確認**: `nicegui-query` 出力数と DOM構造で動作確認
6. **本番投入**: 他のページでの利用可能性確認

### 実装時の注意点（NiceGUI準拠）
- **公式ドキュメント優先**: 新機能実装前に[公式ドキュメント](https://nicegui.io/documentation/)を確認
- **カスタムCSS最小化**: 公式コンポーネントで解決できる場合はCSS直書き回避
- **classes()とstyle()使い分け**: Tailwindクラスは`classes()`、カスタムCSSは`style()`
- **simple_test.pyとの一致性確認**: `nicegui-query` 出力数で正確性検証
- **段階的移行**: 全ページ一括変更ではなく、1ページずつ確実に移行
- **バックアップ保持**: 既存実装は必ず `_back` として保持
- **DOM実測**: ブラウザ開発者ツールで実際の出力を常に確認

### カスタムCSS vs 公式コンポーネント判断基準
```python
# ✅ 公式コンポーネントで実現可能 → 優先
ui.table(columns=columns, rows=rows, pagination=True)

# ✅ 公式 + 軽微なスタイル調整 → 許可
ui.card().style('border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);')

# ⚠️ 複雑なカスタムレイアウト → arrangement_test.pyで実験後判断
with ui.element('div').style('display: grid; grid-template-columns: ...'):
    # 複雑なカスタム実装
```
                                
## トラブルシューティングガイド（2025年1月実証済み）

### 白画面問題の診断手順

#### **症状**: ページが真っ白で何も表示されない
1. **HTMLレスポンス確認**
   ```bash
   curl -s "http://localhost:8081/ページ名" | grep -c '<div id="app">'
   ```
   - 0の場合: Vue.jsのマウントポイントが生成されていない
   - 1の場合: HTMLは正常、JavaScript側の問題

2. **ブラウザコンソール確認**
   - `F12` → Console タブ
   - 赤色のエラーメッセージを確認
   - 特に`setAttribute`関連のエラーに注意

3. **import経路確認**
   ```python
   # ❌ 循環importの原因
   from prototypes.ui.components.layout import RAGHeader
   
   # ✅ 正しいimport
   from ui.components.layout import RAGHeader
   ```

### JavaScriptエラーの解決方法

#### **エラー**: `Failed to execute 'setAttribute' on 'Element': '0' is not a valid attribute name`

**原因**: NiceGUIの`props()`メソッドで複数行の文字列を不正に連結

```python
# ❌ エラーの原因（スペースなし）
element.props(
    'onfocus="this.style.borderColor=\'#3b82f6\'"'
    'onblur="this.style.borderColor=\'#d1d5db\'"'
)
# → "0":true, "3px":true のような不正な属性が生成される

# ✅ 正しい実装（行末にスペース追加）
element.props(
    'onfocus="this.style.borderColor=\'#3b82f6\'" '  # スペース重要！
    'onblur="this.style.borderColor=\'#d1d5db\'"'
)
```

### ファイル分割時の注意事項

#### **タブコンテンツの分離**
```python
# arrangement_test.py（メインファイル）
from ui.pages.arrangement_test_tab_a import ArrangementTestTabA

# タブAのレンダリング
tab_a = ArrangementTestTabA()
tab_a.render()
```

**重要**: 
- メインファイルとタブファイルのimport経路を統一
- クラス名の重複を避ける
- 各タブファイルは独立して動作可能に設計

### 共通コンポーネント移行時のリスク管理

#### **段階的移行プロセス**
1. **実験段階**: `arrangement_test.py`で新実装をテスト
2. **バックアップ**: 既存ファイルを`_backup`付きでコピー
3. **小規模テスト**: 1つのコンポーネントから移行
4. **動作確認**: 各段階でサーバー再起動とブラウザ確認
5. **ロールバック準備**: 問題発生時は即座に元に戻す

#### **ファイル管理のベストプラクティス**
```bash
# クリーンアップ前の確認
ls -la prototypes/ui/pages/arrangement_test*

# 不要ファイルの削除（慎重に）
rm prototypes/ui/pages/arrangement_test_old.py
rm prototypes/ui/pages/arrangement_test_new.py
```

### デバッグ効率化テクニック

#### **サーバー起動の自動化**
```bash
# タイムアウト付き起動（推奨）
cd /workspace/prototypes && timeout 15 python3 main.py &
```

#### **エラーチェックの習慣化**
1. コード変更後は必ずサーバー再起動
2. ブラウザのハードリロード（Ctrl+Shift+R）
3. Developer Toolsのコンソール確認
4. ネットワークタブで404エラーチェック

### メモリ設定の重要性

作業完了時には必ず[[memory:5216600]]タイムアウト付きサーバー起動を使用し、
不確実な推測ではなく[[memory:5216640]]実際の動作確認を優先すること。