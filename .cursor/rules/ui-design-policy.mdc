---
alwaysApply: true
---
RAGシステムにおけるUI設計ポリシー - NiceGUI + CSS統合指針

## 基本原則

### 情報密度最大化
- 無駄な隙間は完全排除：画面端の余白は0px、コンポーネント間隙間は最小限
- 1画面内の情報量を最大化：スクロール不要で全情報を表示
- 行間・パディング・マージンは必要最小限に抑制

### 階層的CSS設計
- CSS優先度は自然な階層構造で制御、`!important`は完全禁止
- レベル1（最下層）：ブラウザリセット（margin: 0, padding: 0）
- レベル2：フレームワーク制御（Quasar/NiceGUIデフォルト値の正確な上書き）
- レベル3：共通デザインシステム（再利用可能なユーティリティクラス）
- レベル4（最上層）：コンポーネント固有スタイル

### 場当たり設計完全排除
- CSS定義は1箇所のみ：複数ファイルでの重複定義禁止
- 推測による設定禁止：ブラウザ開発者ツールで実測値確認必須
- デバッグ駆動設計：問題発生時は根本原因を特定してから解決

## NiceGUI特化ガイドライン

### DOM構造の正確理解
```html
<body>                           <!-- ブラウザデフォルト: margin: 8px -->
  <div id="q-app">               
    <div class="q-layout">       
      <header class="q-header">  <!-- メニューエリア -->
      <main class="q-page-container">  <!-- Quasarデフォルト: padding: 16px -->
        <div class="q-page">     <!-- Quasarデフォルト: padding: 16px -->
          <div class="nicegui-content">  <!-- NiceGUIデフォルト: padding: 1rem -->
            <!-- コンテンツエリア -->
          </div>
        </div>
      </main>
    </div>
  </div>
</body>
```

### 余白除去の正確な実装
- ブラウザリセット：`html, body { margin: 0; padding: 0; }`
- Quasar制御：`.q-page-container, .q-page { padding: 0; }`
- NiceGUI制御：`.nicegui-content { padding: 0; }`
- コンポーネント制御：`.nicegui-row, .nicegui-column { gap: 0; }`

### センタリング設計原則
- Flexboxコンテナ使用：`display: flex; justify-content: center; align-items: center;`
- `text-align: center`はインライン要素のみ使用
- コンテナとアイテムのセンタリングを明確に区別

## CSS責任分離

### ファイル構成
```
prototypes/
├── main_new.py                 # ページ定義のみ（CSS記述禁止）
├── ui/
│   ├── styles/
│   │   ├── global.css          # 唯一のグローバルCSS定義場所
│   │   └── common.py           # Python定数・クラス定義
│   ├── components/
│   │   └── layout.py           # レイアウトコンポーネント
│   └── pages/
│       └── *.py                # ページ固有ロジック（CSS記述禁止）
```

### CSS定義規則
- グローバルCSS：`ui.add_head_html()`は1箇所のみで定義
- Python定数：`CommonStyles`クラスで色・サイズ・スペーシング管理
- コンポーネントクラス：再利用可能なTailwind/カスタムクラス定義

### 共通設定の切り出し
```python
# ui/styles/common.py
class CommonStyles:
    # フォントサイズ
    FONT_SIZE_XS = "text-xs"      # 12px
    FONT_SIZE_SM = "text-sm"      # 14px
    FONT_SIZE_BASE = "text-base"  # 16px
    
    # 色設定
    COLOR_PRIMARY = "#334155"     # メイン色
    COLOR_TEXT_PRIMARY = "#1f2937"
    
    # スペーシング
    PADDING_NONE = "p-0"
    MARGIN_NONE = "m-0"
    
    # コンポーネント
    BTN_PRIMARY = "bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded"
    CARD_BASE = "bg-white rounded-lg shadow-md p-4"
```

## 実装チェックリスト

### 開始前必須確認
- [ ] CSS定義場所は1箇所のみか？
- [ ] ブラウザ開発者ツールでDOM構造を確認したか？
- [ ] フレームワークのデフォルト値を実測したか？

### 実装中必須確認
- [ ] `!important`を使用していないか？
- [ ] 複数ファイルで同じスタイルを定義していないか？
- [ ] Flexboxとtext-alignを正しく使い分けているか？
- [ ] 共通設定を`CommonStyles`から使用しているか？

### 完成後必須確認
- [ ] 画面四辺の隙間が0pxか？（開発者ツールで実測）
- [ ] センタリングが期待通りか？
- [ ] 情報密度が最大化されているか？
- [ ] 1画面内にスクロール不要で情報が収まっているか？

## 禁止事項

### 絶対禁止
- `!important`の使用
- 複数ファイルでのCSS重複定義
- 推測によるデフォルト値設定
- `text-align`によるFlexboxアイテムのセンタリング

### 強く非推奨
- インラインスタイルの多用（`.style()`の濫用）
- ハードコードされた数値（色・サイズ・スペーシング）
- 場当たり的なマージン・パディング調整

## デバッグ手順

### 隙間問題の解決手順
1. ブラウザ開発者ツールでDOM構造確認
2. 各レベル（html/body/.q-page/.nicegui-content）の実測値確認
3. 計算値と期待値の差分特定
4. 該当レベルのCSSを正確に上書き

### センタリング問題の解決手順
1. 親コンテナがFlexboxか確認
2. `justify-content`と`align-items`の設定確認
3. 子要素の`flex`プロパティ確認
4. テキストの場合は`text-align`併用

## 重要な技術仕様

### NiceGUIデフォルト値（実測）
- `.q-page-container`: `padding: 16px`
- `.q-page`: `padding: 16px`
- `.nicegui-content`: `padding: 1rem` (16px)
- `.nicegui-row`: `gap: 8px`
- `.nicegui-column`: `gap: 8px`

### ブラウザデフォルト値
- `body`: `margin: 8px`
- `h1-h6`: `margin-top`, `margin-bottom`設定あり

## 完全paddingゼロ実現ノウハウ（実証済み）

### 成功パターン
1. **position:fixed + 明示的寸法指定**
   ```css
   position:fixed;top:0;left:0;right:0;width:100%;height:48px;
   background:#334155;padding:0;margin:0;overflow:hidden;
   ```
   → ヘッダー・フッターで100%成功

2. **グローバルCSS階層制御**
   ```css
   html, body { margin:0; padding:0; width:100%; overflow-x:hidden; }
   #q-app { margin:0; padding:0; width:100%; overflow-x:hidden; }
   .q-layout { margin:0; padding:0; width:100%; overflow-x:hidden; }
   .q-page-container { padding:0; margin:0; width:100%; }
   .q-page { padding:0; margin:0; width:100%; }
   .nicegui-content { padding:0; margin:0; width:100%; }
   .nicegui-row, .nicegui-column { margin:0; padding:0; gap:0; }
   ```
   → 全フレームワーク制御で成功

3. **要素別明示的制御**
   ```python
   ui.element('div').style('margin:0;margin-left:0;margin-right:0;padding:0;width:100%;')
   ```
   → 個別要素でも成功

### 失敗パターン
1. **TailwindCSS依存**: `px-4`, `py-2` 等は意図しないpadding挿入
2. **100vw使用**: スクロールバー分はみ出し → `width:100%`が正解
3. **NiceGUI classes()依存**: `w-full`等も内部でpadding付与の可能性

### 確実な手順
1. グローバルCSS設定（main.py）
2. position:fixed要素（ヘッダー・フッター）
3. 個別要素の明示的制御
4. ブラウザ開発者ツールで実測値確認

## 共通コンポーネント設計原則

### ファイル構成戦略
```
prototypes/ui/
├── components/
│   ├── layout.py      # ページ全体構造（ヘッダー・フッター）
│   ├── sections.py    # セクション単位（ヒーロー・機能リスト・状況表示）
│   └── elements.py    # 個別要素（ボタン・パネル・テーブル）
└── styles/
    └── common.py      # CSS定数・クラス定義
```

### コンポーネント階層
- **Level 1**: ページ全体レイアウト（layout.py）
- **Level 2**: セクション単位コンポーネント（sections.py）  
- **Level 3**: 個別UI要素（elements.py）
- **Level 4**: スタイル定数（common.py）

これらの原則に従い、情報密度最大化と保守性を両立したUI設計を実現する。